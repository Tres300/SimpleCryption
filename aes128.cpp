// Created by Tres300 for SimpleCryption
// AES128 Encryption and Decryption
// Last Updated 7/27/23

#include <cstdint>
#include <cstring>
#include <fstream>

#include <iomanip>
#include <sstream>
#include <iostream>

static const uint8_t Rcon[11] = {
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

static const uint8_t sbox[256] = {
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

static const uint8_t rsbox[256] = {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

static const uint8_t rjMixMultiplyBy2[256] = {
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
        0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
        0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
        0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
        0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
        0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
        0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
        0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
        0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
        0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

static const uint8_t rjMixMultiplyBy3[256] = {
        0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
        0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
        0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
        0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
        0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
        0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
        0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
        0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
        0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
        0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
        0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
        0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
        0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
        0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
        0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
        0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};


class KeySchedule {
private:
    uint8_t roundKeys[11][4][4];
    uint8_t key[4][4];

    void RotWord(uint8_t* word) {
        uint8_t tmp = word[0];
        word[0] = word[1];
        word[1] = word[2];
        word[2] = word[3];
        word[3] = tmp;
    }

    void SubWord(uint8_t* word) {
        for(int i = 0; i < 4; ++i) {
            word[i] = sbox[word[i]];
        }
    }

    void RconXOR(uint8_t* word, int& roundNum) {
        word[0] ^= Rcon[roundNum];
    }

    void byteXOR(uint8_t* overwrite, const uint8_t* other) {
        for(int i = 0; i < 4; ++i) {
            overwrite[i] ^= other[i];
        }
    }

public:
    KeySchedule() = delete;

    KeySchedule(uint8_t (*inputKey)[4][4]) {

        std::memcpy(this->key, inputKey, 16*sizeof(uint8_t));
        std::memcpy(&(roundKeys[0]), inputKey, 16*sizeof(uint8_t));
        delete [] inputKey;

        int roundNum = 0;
        while(roundNum < 11) {
            ++roundNum;
            uint8_t* lastWord = new uint8_t[4];
            std::memcpy(lastWord, &key[3], 4 * sizeof(uint8_t));
            RotWord(lastWord);
            SubWord(lastWord);
            RconXOR(lastWord, roundNum);
            byteXOR(key[0], lastWord);
            delete[] lastWord;
            byteXOR(key[1], key[0]);
            byteXOR(key[2], key[1]);
            byteXOR(key[3], key[2]);
            std::memcpy(roundKeys[roundNum], this->key, 16*sizeof(uint8_t));
        }
    }

    // **Note** Make sure this gets deleted completely after use
    uint8_t (*getKey())[11][4][4]  {
        uint8_t (*returnRoundKeys)[11][4][4] = new uint8_t[1][11][4][4];
        std::memcpy(returnRoundKeys, this->roundKeys, sizeof(roundKeys));
        return returnRoundKeys;
    }

};

class AES_128Encrypt {
private:
    uint8_t (*roundKeys)[11][4][4];
    uint8_t block[4][4];
    std::string cypherText;

    void addRoundKey(int roundNum) {
        for(int i = 0; i < 4; ++i) {
            for(int j = 0; j < 4; ++j) {
                block[i][j] ^= (*roundKeys)[roundNum][i][j];
            }

        }
    }

    void subBytes() {
        for(int i = 0; i < 4; ++i) {
            for(int j = 0; j < 4; ++j) {
                block[i][j] = sbox[block[i][j]];
            }
        }
    }

    // So it turns out the AES algorithm is supposed to be in column-major order
    // block[col][row]. Instead, shiftRows will really be like shifting columns,
    // since this implementation is in row-major order.
    void shiftRows() {
        uint8_t tmp;

        tmp = block[0][1];
        block[0][1] = block[1][1];
        block[1][1] = block[2][1];
        block[2][1] = block[3][1];
        block[3][1] = tmp;

        tmp = block[0][2];
        block[0][2] = block[2][2];
        block[2][2] = tmp;
        tmp = block[1][2];
        block[1][2] = block[3][2];
        block[3][2] = tmp;

        tmp = block[0][3];
        block[0][3] = block[3][3];
        block[3][3] = block[2][3];
        block[2][3] = block[1][3];
        block[1][3] = tmp;
    }

    void mixColumns() {
        uint8_t blockCopy[4][4];
        std::memcpy(&blockCopy, this->block, 16*sizeof(uint8_t));

        for(int i = 0; i < 4; ++i) {
            block[i][0] = rjMixMultiplyBy2[int(blockCopy[i][0])] ^ rjMixMultiplyBy3[int(blockCopy[i][1])] ^ blockCopy[i][2] ^ blockCopy[i][3];
            block[i][1] = blockCopy[i][0] ^ rjMixMultiplyBy2[int(blockCopy[i][1])] ^ rjMixMultiplyBy3[int(blockCopy[i][2])] ^ blockCopy[i][3];
            block[i][2] = blockCopy[i][0] ^ blockCopy[i][1] ^ rjMixMultiplyBy2[int(blockCopy[i][2])] ^ rjMixMultiplyBy3[int(blockCopy[i][3])];
            block[i][3] = rjMixMultiplyBy3[int(blockCopy[i][0])] ^ blockCopy[i][1] ^ blockCopy[i][2] ^ rjMixMultiplyBy2[int(blockCopy[i][3])];
        }
    }

    static std::string convertStringToHex(const std::string& input) {
        if(input.size() != 32)
            throw std::length_error("Text/Key must be 32 characters long.");


        int value;
        std::ostringstream output;
        for(int i = 0; i < input.size()-1; i += 2) {
            std::istringstream hexStream(input.substr(i, 2));
            hexStream >> std::setw(2) >> std::hex >> value;
            output << static_cast<char>(value);
        }

        return output.str();
    }

    static uint8_t (*convertHexToKey(const std::string& input))[4][4] {
        auto key = new uint8_t[1][4][4];
        int k = 0;
        for(int i = 0; i < 4; ++i) {
            for(int j = 0; j < 4; ++j) {
                key[0][i][j] = input[k++];
            }
        }
        return key;
    }

    void setPlaintextFromHex(const std::string& input) {
        int k = 0;
        for(int i = 0; i < 4; ++i) {
            for(int j = 0; j < 4; ++j) {
                block[i][j] = input[k++];
            }
        }
    }

    void setCyphertextFromBlock() {
        std::ostringstream cypherStream;
        for(int i = 0; i < 4; ++i) {
            for(int j = 0; j < 4; ++j) {
                cypherStream << std::setw(2) << std::setfill('0') <<
                    std::hex << static_cast<int>(block[i][j]);
            }
        }
        cypherText = cypherStream.str();
    }

    // Used for debugging only
    void print() {
        std::ostringstream cypherStream;
        for(int i = 0; i < 4; ++i) {
            for(int j = 0; j < 4; ++j) {
                cypherStream << std::setw(2) << std::setfill('0') <<
                             std::hex << static_cast<int>(block[i][j]);
            }
        }
        std::cout << cypherStream.str() << std::endl;
    }

public:
    AES_128Encrypt(const std::string& plainText, const std::string& key) {
        KeySchedule k(convertHexToKey(convertStringToHex(key)));
        roundKeys = k.getKey();

        setPlaintextFromHex(convertStringToHex(plainText));

        // Encrypt
        addRoundKey(0);
        for(int r = 1; r < 10; ++r) {
            subBytes();
            shiftRows();
            mixColumns();
            addRoundKey(r);
        }
        subBytes();
        shiftRows();
        addRoundKey(10);

        setCyphertextFromBlock();
    }

    ~AES_128Encrypt() {
        delete[] roundKeys;
    }

    std::string getCypherText() {
        return cypherText;
    }
};
